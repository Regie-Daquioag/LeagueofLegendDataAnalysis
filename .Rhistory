prediction-types = c(firstBlood, firstTower, firstInhibitor, firstBaron, firstDragon, firstRiftHerald)
label_names = c('firstBlood', 'firstTower', 'firstInhibitor', 'firstBaron', 'firstDragon', 'firstRiftHerald')
for(label in label_names){
barplot(table(dat$label), main=label)
}
label_names = c('firstBlood', 'firstTower', 'firstInhibitor', 'firstBaron', 'firstDragon', 'firstRiftHerald')
for(label in label_names){
barplot(table(dat$label))
}
barplot(table(dat$firstBaron))
label_names = c("firstBlood", "firstTower", "firstInhibitor", "firstBaron", "firstDragon", "firstRiftHerald")
for(label in label_names){
barplot(table(dat$label))
}
?sapply
?apply
apply(dat$gameDuration,2,function(x) mean(x))
apply(dat$gameDuration,function(x) mean(x))
apply(dat$gameDuration,1,function(x) mean(x))
apply(as.vector(dat$gameDuration),1,function(x) mean(x))
apply(dat$gameDuration,1,mean)
plot(dat$gameDuration ~ dat$winner)
barplot(table(dat$firstBlood), main="First Blood")
barplot(table(dat$firstBlood), main="First Blood")
barplot(table(dat$firstTower), main="First Tower")
barplot(table(dat$firstInhibitor), main="First Inhibitor")
barplot(table(dat$firstBaron), main="First Baron")
barplot(table(dat$firstDragon), main="First Dragon")
barplot(table(dat$firstRiftHerald), main="First Rift Herald")
barplot(table(dat$firstBlood), main="First Blood", col="colors")
barplot(table(dat$firstBlood), main="First Blood", col=colors)
barplot(table(dat$firstBlood), main="First Blood", col=colors)
barplot(table(dat$firstBlood), main="First Blood", col=c("red4"))
barplot(table(dat$firstBlood), main="First Blood", col=c("grey4", "blue", "red4"))
barplot(table(dat$firstBlood), main="First Blood", col=c("grey4", "blue", "red"))
barplot(table(dat$firstBlood), main="First Blood", col=c("grey", "blue", "red"))
colors = c("grey", "blue", "red")
barplot(table(dat$firstBlood), main="First Blood", col=colors)
barplot(table(dat$firstTower), main="First Tower", col=colors)
colors = c("grey", "blue", "red")
par(mar=c(2,3))
barplot(table(dat$firstBlood), main="First Blood", col=colors)
barplot(table(dat$firstTower), main="First Tower", col=colors)
barplot(table(dat$firstInhibitor), main="First Inhibitor", col=colors)
barplot(table(dat$firstBaron), main="First Baron", col=colors)
barplot(table(dat$firstDragon), main="First Dragon", col=colors)
barplot(table(dat$firstRiftHerald), main="First Rift Herald", col=colors)
colors = c("grey", "blue", "red")
par(mfrow=c(2,3))
barplot(table(dat$firstBlood), main="First Blood", col=colors)
barplot(table(dat$firstTower), main="First Tower", col=colors)
barplot(table(dat$firstInhibitor), main="First Inhibitor", col=colors)
barplot(table(dat$firstBaron), main="First Baron", col=colors)
barplot(table(dat$firstDragon), main="First Dragon", col=colors)
barplot(table(dat$firstRiftHerald), main="First Rift Herald", col=colors)
plot(winner ~ firstBlood, data=dat)
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner ~ firstBlood + firstTower + firstInhibitor, data=tr_dat, family=binomial)
fit = glm(winner-1 ~ firstBlood + firstTower + firstInhibitor, data=tr_dat, family=binomial)
fit = glm(winner-1 ~ firstBlood + firstTower + firstInhibitor, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.65)
actuals = te_dat$output
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
y
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.65)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
table(dat$winner)
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.65)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.65)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.65)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.65)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.65)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.65)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
y
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.50)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.50)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.50)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.50)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.50)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.50)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.50)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.50)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.50)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
y
y
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.50)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
##Logistic regression model
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.55)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
##Logistic regression model
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.55)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
##Logistic regression model
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.55)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
##Logistic regression model
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.55)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
##Logistic regression model
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.55)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
##Logistic regression model
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.60)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
##Logistic regression model
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.60)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
##Logistic regression model
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.60)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
##Logistic regression model
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.60)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
##Logistic regression model
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.60)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
##Logistic regression model
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.60)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
##Logistic regression model
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.75)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
##Logistic regression model
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.75)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
##Logistic regression model
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.75)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
##Logistic regression model
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.55)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
##Logistic regression model
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.55)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
##Logistic regression model
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.55)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
##Logistic regression model
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower + firstInhibitor, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.55)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower + firstInhibitor, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.65)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
plot(density(y[actuals == 1]), col="red", main="Double Density of Heart Disease for Actual")
lines(density(y[actuals == 0]), col="blue")
prec_recall_summary = function(predicts, actuals) {
thresh = seq(0, 1, length.out=65)
prec_rec = data.frame()
actuals = factor(as.numeric(actuals))
for (th in thresh) {
predicts = factor(as.numeric(y >= th), levels=c("0","1"))
prec_rec = rbind(prec_rec, as.vector(table(predicts, actuals)))
}
names(prec_rec) = c("TN", "FP", "FN", "TP")
prec_rec$threshold = thresh
prec_rec$precision = prec_rec$TP/(prec_rec$TP + prec_rec$FP)
prec_rec$recall    = prec_rec$TP/(prec_rec$TP + prec_rec$FN)
prec_rec$false_pos = prec_rec$FP/(prec_rec$FP + prec_rec$TN)
prec_rec$true_pos = prec_rec$TP/(prec_rec$TP + prec_rec$FN)
return(prec_rec)
}
prec_rec1 = prec_recall_summary(predicts, actuals)
plot(prec_rec1$true_pos ~ prec_rec1$false_pos, xlab="False Positive", ylab="True Positive", type="l", col="red4", main="ROC")
plot(dat$gameDuration ~ dat$winner)
plot(dat$winner ~ dat$gameDuration)
plot(dat$gameDuration)
plot(dat$gameDuration)
plot(dat$gameDuration, pch=".")
plot(dat[dat$winner=1,]$gameDuration, pch=".", col="blue")
lines(dat[dat$winner=2,]$gameDuration, pch=".", col="red")
plot(dat[dat$winner==1,]$gameDuration, pch=".", col="blue")
lines(dat[dat$winner==2,]$gameDuration, pch=".", col="red")
plot(dat[dat$winner==1,]$gameDuration, pch=".", col="blue")
plot(dat[dat$winner==1,]$gameDuration, pch=".", col="blue")
plot(dat[dat$winner==2,]$gameDuration, pch=".", col="red")
plot(dat[dat$winner==1,]$gameDuration, pch=".", col="blue")
points(dat[dat$winner==2,]$gameDuration, pch=".", col="red")
