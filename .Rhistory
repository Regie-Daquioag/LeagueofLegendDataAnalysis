y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.65)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.65)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.65)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.65)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.65)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.65)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
y
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.50)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.50)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.50)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.50)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.50)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.50)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.50)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.50)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.50)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
y
y
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.50)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
##Logistic regression model
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.55)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
##Logistic regression model
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.55)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
##Logistic regression model
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.55)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
##Logistic regression model
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.55)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
##Logistic regression model
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.55)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
##Logistic regression model
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.60)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
##Logistic regression model
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.60)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
##Logistic regression model
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.60)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
##Logistic regression model
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.60)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
##Logistic regression model
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.60)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
##Logistic regression model
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.60)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
##Logistic regression model
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.75)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
##Logistic regression model
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.75)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
##Logistic regression model
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.75)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
##Logistic regression model
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.55)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
##Logistic regression model
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.55)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
##Logistic regression model
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.55)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
##Logistic regression model
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower + firstInhibitor, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.55)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
tr_rows=sample(nrow(dat), 0.75 * nrow(dat))
tr_dat = dat[tr_rows,]
te_dat = dat[-tr_rows,]
fit = glm(winner-1 ~ firstBlood + firstTower + firstInhibitor, data=tr_dat, family=binomial)
y = predict(fit, newdata=te_dat, type="response")
predicts = as.numeric(y > 0.65)
actuals = te_dat$winner-1
conf_mtx = table(predicts, actuals)
conf_mtx
rate = mean(predicts == actuals)
round(rate, 2)
plot(density(y[actuals == 1]), col="red", main="Double Density of Heart Disease for Actual")
lines(density(y[actuals == 0]), col="blue")
prec_recall_summary = function(predicts, actuals) {
thresh = seq(0, 1, length.out=65)
prec_rec = data.frame()
actuals = factor(as.numeric(actuals))
for (th in thresh) {
predicts = factor(as.numeric(y >= th), levels=c("0","1"))
prec_rec = rbind(prec_rec, as.vector(table(predicts, actuals)))
}
names(prec_rec) = c("TN", "FP", "FN", "TP")
prec_rec$threshold = thresh
prec_rec$precision = prec_rec$TP/(prec_rec$TP + prec_rec$FP)
prec_rec$recall    = prec_rec$TP/(prec_rec$TP + prec_rec$FN)
prec_rec$false_pos = prec_rec$FP/(prec_rec$FP + prec_rec$TN)
prec_rec$true_pos = prec_rec$TP/(prec_rec$TP + prec_rec$FN)
return(prec_rec)
}
prec_rec1 = prec_recall_summary(predicts, actuals)
plot(prec_rec1$true_pos ~ prec_rec1$false_pos, xlab="False Positive", ylab="True Positive", type="l", col="red4", main="ROC")
plot(dat$gameDuration ~ dat$winner)
plot(dat$winner ~ dat$gameDuration)
plot(dat$gameDuration)
plot(dat$gameDuration)
plot(dat$gameDuration, pch=".")
plot(dat[dat$winner=1,]$gameDuration, pch=".", col="blue")
lines(dat[dat$winner=2,]$gameDuration, pch=".", col="red")
plot(dat[dat$winner==1,]$gameDuration, pch=".", col="blue")
lines(dat[dat$winner==2,]$gameDuration, pch=".", col="red")
plot(dat[dat$winner==1,]$gameDuration, pch=".", col="blue")
plot(dat[dat$winner==1,]$gameDuration, pch=".", col="blue")
plot(dat[dat$winner==2,]$gameDuration, pch=".", col="red")
plot(dat[dat$winner==1,]$gameDuration, pch=".", col="blue")
points(dat[dat$winner==2,]$gameDuration, pch=".", col="red")
table(dat$firstInhibitor)
te_errs = c()
tr_errs = c()
te_actual = te_dat$winner
tr_sizes = seq(100, nrow(tr_dat), length.out=10)
for (tr_size in tr_sizes) {
tr_dat1 = tr_dat[1:tr_size,]
tr_actual = tr_dat1$winner
fit = rpart(winner ~ ., data=tr_dat1)
#error on training set
tr_predicted = predict(fit, tr_dat1, type="class")
err = mean(tr_actual != tr_predicted)
tr_errs = c(tr_errs, err)
table(tr_actual, tr_predicted)
# error on test set
te_predicted = predict(fit, te_dat, type="class")
err = mean(te_actual != te_predicted)
te_errs = c(te_errs, err)
table(te_actual, te_predicted)
}
# Plot learning curve here
plot(tr_errs, type="b", col="red", xlab="Training Set Size", ylab="Classification Error", main=paste("Learning Curve"), ylim=c(0,1))
lines(te_errs, type = "b", col = "blue")
legend('topright', c("Train error", "Test error"), lty = c(1,1), lwd = c(2.5, 2.5), col = c("red", "blue"), cex=0.7)
library(rpart)
library(rpart.plot)
library(maptree)
install.packages("rpart")
install.packages("rpart.plot")
install.packages("maptree")
te_errs = c()
tr_errs = c()
te_actual = te_dat$winner
tr_sizes = seq(100, nrow(tr_dat), length.out=10)
for (tr_size in tr_sizes) {
tr_dat1 = tr_dat[1:tr_size,]
tr_actual = tr_dat1$winner
fit = rpart(winner ~ ., data=tr_dat1)
#error on training set
tr_predicted = predict(fit, tr_dat1, type="class")
err = mean(tr_actual != tr_predicted)
tr_errs = c(tr_errs, err)
table(tr_actual, tr_predicted)
# error on test set
te_predicted = predict(fit, te_dat, type="class")
err = mean(te_actual != te_predicted)
te_errs = c(te_errs, err)
table(te_actual, te_predicted)
}
# Plot learning curve here
plot(tr_errs, type="b", col="red", xlab="Training Set Size", ylab="Classification Error", main=paste("Learning Curve"), ylim=c(0,1))
lines(te_errs, type = "b", col = "blue")
legend('topright', c("Train error", "Test error"), lty = c(1,1), lwd = c(2.5, 2.5), col = c("red", "blue"), cex=0.7)
library("rpart", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("rpart.plot", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
library("maptree", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
te_errs = c()
tr_errs = c()
te_actual = te_dat$winner
tr_sizes = seq(100, nrow(tr_dat), length.out=10)
for (tr_size in tr_sizes) {
tr_dat1 = tr_dat[1:tr_size,]
tr_actual = tr_dat1$winner
fit = rpart(winner ~ ., data=tr_dat1)
#error on training set
tr_predicted = predict(fit, tr_dat1, type="class")
err = mean(tr_actual != tr_predicted)
tr_errs = c(tr_errs, err)
table(tr_actual, tr_predicted)
# error on test set
te_predicted = predict(fit, te_dat, type="class")
err = mean(te_actual != te_predicted)
te_errs = c(te_errs, err)
table(te_actual, te_predicted)
}
# Plot learning curve here
plot(tr_errs, type="b", col="red", xlab="Training Set Size", ylab="Classification Error", main=paste("Learning Curve"), ylim=c(0,1))
lines(te_errs, type = "b", col = "blue")
legend('topright', c("Train error", "Test error"), lty = c(1,1), lwd = c(2.5, 2.5), col = c("red", "blue"), cex=0.7)
